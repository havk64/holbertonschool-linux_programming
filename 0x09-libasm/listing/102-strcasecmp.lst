     1                                  BITS 64
     2                                  CPU X64
     3                                  	;;
     4                                  	;; asm_strcasecmp - clone of strcasecmp function in x86 assembly
     5                                  	;;
     6                                  	;; Description: compares the two strings s1 and s2, ignoring the case of
     7                                  	;; the characters.
     8                                  	;;
     9                                  	;; Prototype: int asm_strcasecmp(const char *s1, const char *s2);
    10                                  	;; @s1: a pointer to the first string
    11                                  	;; @s2: a pointer to the second string
    12                                  	;; Return: It returns an integer less than, equal to, or greater than
    13                                  	;; zero if s1 is found, respectively, to be less than, to match, or be
    14                                  	;; greater than s2.
    15                                  	;;
    16                                  
    17                                  	global asm_strcasecmp
    18                                  
    19                                  segment .text
    20                                  asm_strcasecmp:
    21 00000000 55                      	push rbp		; Routine preamble
    22 00000001 4889E5                  	mov rbp, rsp
    23 00000004 53                      	push rbx		; Preserve register's state
    24 00000005 51                      	push rcx
    25 00000006 4150                    	push r8
    26 00000008 31C9                    	xor ecx, ecx		; Clear the counter (zero)
    27                                  
    28                                  loop:
    29 0000000A 670FB6040F              	movzx eax, BYTE [edi + ecx] ; Read @s1 character and start case checking
    30 0000000F 67448D40BF              	lea r8d, [eax - 'A']	    ; By subt the lower bound we skip one comparison
    31 00000014 4180F819                	cmp r8b, 'Z' - 'A'	    ; The only comparison needed  now is with max - min
    32 00000018 410F96C0                	setbe r8b		    ; Using setxx we avoid unnecessary jumps
    33 0000001C 41C0E005                	shl r8b, 5		    ; Activate the 6th bit, if uppercase
    34 00000020 4408C0                  	or al, r8b		    ; Use *or* to activate it and lower the case
    35 00000023 670FB61C0E              	movzx ebx, BYTE [esi + ecx] ; Do the same with the second string @s2
    36 00000028 67448D43BF              	lea r8d, [ebx - 'A']
    37 0000002D 4180F819                	cmp r8b, 'Z' - 'A'
    38 00000031 67448D4320              	lea r8d, [ebx + 0x20]	; This time, instead of setxx I'm using LEA...
    39 00000036 410F46D8                	cmovbe ebx, r8d		; and conditional move to lower the case (when upper)
    40 0000003A 38D8                    	cmp al, bl		; Check if they diff (after converted to lower case)
    41 0000003C 750F                    	jnz diff		; If different jump
    42 0000003E FFC1                    	inc ecx			; Otherwise increase the counter...
    43 00000040 84C0                    	test al, al		; While the char is not end of string (0)...
    44 00000042 75C6                    	jnz loop		; ...loop
    45                                  
    46                                  end:
    47 00000044 4158                    	pop r8			; Restore register's state
    48 00000046 59                      	pop rcx
    49 00000047 5B                      	pop rbx
    50 00000048 4889EC                  	mov rsp, rbp		; Routine prologue
    51 0000004B 5D                      	pop rbp
    52 0000004C C3                      	ret			; Return
    53                                  
    54                                  diff:
    55 0000004D 29D8                    	sub eax, ebx		; Check the difference to return
    56 0000004F EBF3                    	jmp end
