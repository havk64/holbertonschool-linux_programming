     1                                  BITS 64
     2                                  CPU X64
     3                                  
     4                                  	;;
     5                                  	;; asm_strncasecmp - clone of strncasecmp function in X86 Assembly
     6                                  	;;
     7                                  	;; Description:	compares the two strings @s1 and @s2, ignoring the case
     8                                  	;; of the characters.
     9                                  	;;
    10                                  	;; Prototype: int asm_strncasecmp(const char *s1, const char *s2, size_t n);
    11                                  	;; @s1: a pointer to the first string
    12                                  	;; @s2: a pointer to the second string
    13                                  	;; @n: the number of bytes to be compared
    14                                  	;; Return: It returns an integer less than, equal to, or greater than
    15                                  	;; zero if s1 is found, respectively, to be less than, to match, or be
    16                                  	;; greater than s2.compare two strings ignoring case
    17                                  	;;
    18                                  
    19                                  segment .text
    20                                  	global asm_strncasecmp
    21                                  
    22                                  asm_strncasecmp:
    23 00000000 55                      	push rbp		; Routine preamble
    24 00000001 4889E5                  	mov rbp, rsp
    25 00000004 53                      	push rbx		; Preserve register's state
    26 00000005 51                      	push rcx
    27 00000006 4150                    	push r8
    28 00000008 31C9                    	xor ecx, ecx		; Clear the counter (zero)
    29                                  
    30                                  loop:
    31 0000000A 39CA                    	cmp edx, ecx		; When the counter is equal to @n...
    32 0000000C 7447                    	jz break		; Stop the loop
    33 0000000E 670FB6040F              	movzx eax, BYTE [edi + ecx] ; Read @s1 character and start case checking
    34 00000013 67448D40BF              	lea r8d, [eax - 'A']	    ; By subt the lower bound we skip one comparison
    35 00000018 4180F819                	cmp r8b, 'Z' - 'A'	    ; The only comparison needed  now is with max - min
    36 0000001C 410F96C0                	setbe r8b		    ; Using setxx we avoid unnecessary jumps
    37 00000020 41C0E005                	shl r8b, 5		    ; Set the 6th bit to be activated case upper case
    38 00000024 4408C0                  	or al, r8b		    ; Use *or* to activate it and lower the case
    39 00000027 670FB61C0E              	movzx ebx, BYTE [esi + ecx] ; Do the same with the second string @s2
    40 0000002C 67448D43BF              	lea r8d, [ebx - 'A']
    41 00000031 4180F819                	cmp r8b, 'Z' - 'A'
    42 00000035 67448D4320              	lea r8d, [ebx + 0x20]	; This time, instead of setcc I'm using LEA...
    43 0000003A 410F46D8                	cmovbe ebx, r8d		; and conditional move to lower the case (when upper)
    44 0000003E 38D8                    cmp:	cmp al, bl		; Check if they diff
    45 00000040 750F                    	jnz diff		; If different jump
    46 00000042 FFC1                    	inc ecx			; Otherwise increase the counter...
    47 00000044 84C0                    	test al, al		; While the char is not end of string (0)...
    48 00000046 75C2                    	jnz loop		; ...loop
    49                                  
    50                                  end:
    51 00000048 4158                    	pop r8			; Restore register's state/values
    52 0000004A 59                      	pop rcx
    53 0000004B 5B                      	pop rbx
    54 0000004C 4889EC                  	mov rsp, rbp		; Routine prologue
    55 0000004F 5D                      	pop rbp
    56 00000050 C3                      	ret			; Return
    57                                  
    58                                  diff:
    59 00000051 29D8                    	sub eax, ebx		; Check the difference to return
    60 00000053 EBF3                    	jmp end
    61                                  
    62                                  break:
    63 00000055 B800000000              	mov eax, 0
    64 0000005A EBEC                    	jmp end
